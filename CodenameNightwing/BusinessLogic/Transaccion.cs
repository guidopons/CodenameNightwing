//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó mediante una herramienta.
//     Los cambios del archivo se perderán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------
using CodenameNightwing.Config;
using CodenameNightwing.Printer;
using System;
using System.Collections.Generic;

namespace CodenameNightwing.BusinessLogic
{
    public class Transaccion : ICloneable
    {

        #region ICloneable Members

        public object Clone()
        {
            return this.MemberwiseClone();
        }

        #endregion

        public bool isTransToCheckFraud()
        {
            try
            {
                if (!currency.Equals("ARS") 
                    || (currency.Equals("ARS") && importeTotal >= decimal.Parse(Configuration.getInstance().importeMinCS)
                    || Configuration.getInstance().tipoAuthConf.Equals(TipoAutorizador.VTOL_CALLCENTER)))
                {
                    return true;
                }
                else
                {
                    // Solamente no chequemos si es solo EMD
                    if (isOnlyEmdTrx())
                    {
                        return false;
                    }else
                    {
                        // si es canje o emision si tenemos que chequear siempre
                        return true;
                    }
                    
                }
            }
            catch( Exception)
            {
                return true;
            }
            
        }


        public bool isOnlyEmdTrx()
        {

            bool isOnlyEmdTrx = false;
            foreach ( Pnr pnr in this.listPnr ){
                if ( pnr.onlyEmd )
                {
                    isOnlyEmdTrx = true;
                }
                else
                {
                    isOnlyEmdTrx = false;
                    break;
                }
            }

            if ( isOnlyEmdTrx )
                tipoOperacion = TipoOperacion.COMPRA_SOLO_EMD;

            return isOnlyEmdTrx;
        }

        public bool isAprobada()
        {
            return (this.respuestaHost != null && this.respuestaHost.Contains("APROBADA") && this.respuestaHost.Contains("0")) ? true : false;
        }

        public bool isEnCurso()
        {
            return (this.respuestaHost != null && this.respuestaHost.Contains("CURSO")) ? true : false;
        }

        public string getPriceInformation()
        {
            return "Moneda: " + currency + " País: " + country + " PCC: " + pcc;
        }

        public string toLog()
        {

            return "{" + this.trxReferenceId + "," + this.tipoTrans + "," + this.importeTotal + "," + this.modo + "," + this.cantCuotas + "}";
        }

        protected Transaccion(TipoTransaccion tipoTran, TipoAutorizador tipoAuth)
        {
            _tipoTrans = tipoTran;
            _tipoAuth = tipoAuth;
            tipoHost = TipoHost.VISA;
            pais = new Pais();
            tarjeta = new Tarjeta();
            comercio = new Comercio();
            pdv = new PuntoDeAutorizacion();
            pdvOriginal = new PuntoDeAutorizacion();

            // Default ARG , ARS
            country = "ARG";
            currency = "ARS";
            pcc = "AEP";

            transaccionOriginal = null;
            estadoDescripcion = TipoEstadoTransaccion.CREADA;

            // Seteamos todo lo necesario para que se puedea insertar
            trxId = "";//en realidad es lastTrxId de VTOL Server
            pdv.sucursal = Configuration.getInstance().sucursal;
            pdv.caja = Configuration.getInstance().caja;
            moneda = "$";
            numAutorizacion = "";//codigo de autorizacion
            numLote = 0;
            numTicket = "";
            tarjeta.descripcion = "";
            comercio.codigoComercio = "";
            codSoftAMEX = "";
            // INICIO DE CAMPOS AGREGADOS POR NECESIDAD DE ESPECIFICACIONES EN CUPON
            nroTerminal = "";
            tipoIngreso = TipoIngresoTarjeta.BAND;
            tarjeta.owner.nombre = "";
            // FIN DE CAMPOS AGREGADOS POR NECESIDAD DE ESPECIFICACIONES EN CUPON
            modo = TipoModoTransaccion.ONLINE;
            string sFecha = "20170301230000";
            DateTime auxFecha = DateTime.ParseExact(sFecha, "yyyyMMddHHmmss", System.Globalization.CultureInfo.InvariantCulture);
            fecha = auxFecha;
            interactUser = Configuration.getInstance().interactUser;

            isRedirectPayment = false;

        }

        public event EventHandler eventHandler;

        public Promocion promocion { get; set; }


        public bool contactlessClientCopyVoucher { get; set; }
        public bool contactlessrequiresSignature { get; set; }

        public bool isRedirectPayment { get; set; }

        private TipoTransaccion _tipoTrans;
        public TipoTransaccion tipoTrans
        {
            get { return _tipoTrans; }
            set { _tipoTrans = value; }
        }


        private TipoOperacion _tipoOperacion;
        public TipoOperacion tipoOperacion
        {
            get { return _tipoOperacion; }
            set { _tipoOperacion = value; }
        }

        private Transaccion _transaccionOriginal;
        public Transaccion transaccionOriginal
        {
            get { return _transaccionOriginal; }
            set { _transaccionOriginal = value; }
        }

        private TipoHost _tipoHost;
        public TipoHost tipoHost
        {
            get { return _tipoHost; }
            set { _tipoHost = value; }
        }

        // El Estado Descripcion es cuando cambia para informar al Usuario
        // 
        private TipoEstadoTransaccion _estadoDescripcion;
        public TipoEstadoTransaccion estadoDescripcion
        {
            get { return _estadoDescripcion; }
            set {

                _estadoDescripcion = value;
                EventHandler handler = eventHandler;
                if (handler != null)
                {
                    handler(this, EventArgs.Empty);
                }

            }
        }

        private string _printer;
        public string printer
        {
            get { return _printer; }
            set { _printer = value; }
        }

        private string _station;
        public string station
        {
            get { return _station; }
            set { _station = value; }
        }


        private string _pcc;
        public string pcc
        {
            get { return _pcc; }
            set { _pcc = value; }
        }

        private List<Pnr> _listPnr;
        public List<Pnr> listPnr
        {
            get { return _listPnr; }
            set { _listPnr = value; }
        }


        private string _primaryPnr;
        public string primaryPnr
        {
            get { return _primaryPnr; }
            set { _primaryPnr = value; }
        }

        private string _gateway = "V";
        public string gateway
        {
            get { return _gateway; }
            set { _gateway = value; }
        }

        private string _interactUser;
        public string interactUser
        {
            get { return _interactUser; }
            set { _interactUser = value; }
        }


        private bool _isAnulado;
        public bool isAnulado
        {
            get { return _isAnulado; }
            set { _isAnulado = value; }
        }

        private bool _isReversado;
        public bool isReversado
        {
            get { return _isReversado; }
            set { _isReversado = value; }
        }

        private string _codSoftAMEX;
        public string codSoftAMEX
        {
            get { return _codSoftAMEX; }
            set { _codSoftAMEX = value; }
        }

        private string _appNameAMEX;
        public string appNameAMEX
        {
            get { return _appNameAMEX; }
            set { _appNameAMEX = value; }
        }


        private string _numCuenta;
        public string numCuenta
        {
            get { return _numCuenta; }
            set { _numCuenta = value; }
        }


        private string _AID;
        public string AID
        {
            get { return _AID; }
            set { _AID = value; }
        }

        private string _respuestaHost;
        public string respuestaHost
        {
            get { return _respuestaHost; }
            set { _respuestaHost = value; }
        }


        private string _respuestaExtendida;
        public string respuestaExtendida
        {
            get { return _respuestaExtendida; }
            set { _respuestaExtendida = value; }
        }

        private string _moneda;
        public string moneda
        {
            get { return _moneda; }
            set { _moneda = value; }
        }


        private string _currency;
        public string currency
        {
            get { return _currency; }
            set { _currency = value; }
        }

        private string _country;
        public string country
        {
            get { return _country; }
            set { _country = value; }
        }

        private string _codBanco;
        public string codBanco
        {
            get { return _codBanco; }
            set { _codBanco = value; }
        }

        /// <summary>
        /// Hasar, POS Inge, POS Verifone, etc
        /// </summary>

        private TipoAutorizador _tipoAuth;
        public TipoAutorizador tipoAuth
        {
            get { return _tipoAuth; }
        }

        private Comercio _comercio;
        public Comercio comercio
        {
            get { return _comercio; }
            set { _comercio = value; }
        }

        private Tarjeta _tarjeta;
        public Tarjeta tarjeta
        {
            get { return _tarjeta; }
            set { _tarjeta = value; }
        }


        private int _cantCuotas;
        public int cantCuotas
        {
            get { return _cantCuotas; }
            set { _cantCuotas = value; }
        }

        private decimal _interes;
        public decimal interes
        {
            get { return _interes; }
            set { _interes = value; }
        }

        private decimal _importeTotal;
        public decimal importeTotal
        {
            get { return _importeTotal; }
            set { _importeTotal = value; }
        }

        private string _numTicket;
        public string numTicket
        {
            get { return _numTicket; }
            set { _numTicket = value; }
        }

        private string _numAutorizacion;
        public string numAutorizacion
        {
            get { return _numAutorizacion; }
            set { _numAutorizacion = value; }
        }

        private int _numLote;
        public int numLote
        {
            get { return _numLote; }
            set { _numLote = value; }
        }

        private string _estado;
        public string estado
        {
            get { return _estado; }
            set { _estado = value; }
        }

        private DateTime _fecha;
        public DateTime fecha
        {
            get { return _fecha; }
            set { _fecha = value; }
        }

        private Pais _pais;
        public Pais pais
        {
            get { return _pais; }
            set { _pais = value; }
        }


        private string _ticketOriginal;
        public string ticketOriginal
        {
            get { return _ticketOriginal; }
            set { _ticketOriginal = value; }
        }

        private DateTime _fechaOriginal;
        public DateTime fechaOriginal
        {
            get { return _fechaOriginal; }
            set { _fechaOriginal = value; }
        }

        private TipoModoTransaccion _modo = TipoModoTransaccion.ONLINE;
        public TipoModoTransaccion modo
        {
            get { return _modo; }
            set { _modo = value; }
        }

        public int getModoInt() {
            return (int)this.modo;
        }

        private string _trxId;
        public string trxId
        {
            get { return _trxId; }
            set { _trxId = value; }
        }

        private string _trxIdOriginal;
        public string trxIdOriginal
        {
            get { return _trxIdOriginal; }
            set { _trxIdOriginal = value; }
        }


        private string _trxIdVtolUnico;
        public string trxIdVtolUnico
        {
            get { return _trxIdVtolUnico; }
            set { _trxIdVtolUnico = value; }
        }

        private string _primaryEmail;
        public string primaryEmail
        {
            get { return _primaryEmail; }
            set { _primaryEmail = value; }
        }

        private string _nroTerminal;
        public string nroTerminal
        {
            get { return _nroTerminal; }
            set { _nroTerminal = value; }
        }

        private TipoIngresoTarjeta _tipoIngreso;
        public TipoIngresoTarjeta tipoIngreso
        {
            get { return _tipoIngreso; }
            set { _tipoIngreso = value; }
        }

        private PuntoDeAutorizacion _pdv;
        public PuntoDeAutorizacion pdv
        {
            get { return _pdv; }
            set { _pdv = value; }
        }

        private PuntoDeAutorizacion _pdvOriginal;
        public PuntoDeAutorizacion pdvOriginal
        {
            get { return _pdvOriginal; }
            set { _pdvOriginal = value; }
        }

        private int _trxReferenceId;
        public int trxReferenceId
        {
            get { return _trxReferenceId; }
            set { _trxReferenceId = value; }
        }

        private int _trxReferenceIdOriginal;
        public int trxReferenceIdOriginal
        {
            get { return _trxReferenceIdOriginal; }
            set { _trxReferenceIdOriginal = value; }
        }

        public decimal importeSinIntereses()
        {
            return importeTotal - interes;
        }

        private string _idiomaFormNPS;
        public string idiomaFormNPS {
            get { return _idiomaFormNPS; }
            set { _idiomaFormNPS = value; }
        }

        public static Transaccion operator +(Transaccion operador1, Transaccion operador2)
        {
           // operador1.tarjeta.numero = operador2.tarjeta.numero;
            operador1.pais = operador2.pais;
            operador1.tarjeta.owner.documento = operador2.tarjeta.owner.documento;
            operador1.tarjeta.owner.cuitCuil = operador2.tarjeta.owner.cuitCuil;
            operador1.tarjeta.owner.tipoCuitCuil = operador2.tarjeta.owner.tipoCuitCuil;
            return operador1;
        }

        public string getDescripcionPlan()
        {

            string descPlan = null;

            if (tarjeta.descripcion == null)
            {
                return null;
            }

            if (tarjeta.descripcion.ToUpper().Contains("NEVADA"))
            {
                switch (tarjeta.codPlan)
                {
                    case "1": return "PLAN COMUN";
                    case "2": return "NEVAPLAN";
                }

            }

            if (tarjeta.descripcion.ToUpper().Contains("NARANJA"))
            {
                if (cantCuotas == 11)
                {
                    return "PLAN Z";
                }
            }

            if (tarjeta.descripcion.ToUpper().Contains("VISA"))
            {
                if (cantCuotas > 1)
                {
                    switch (tarjeta.codPlan)
                    {
                        case "0": return "PLAN CUOTAS";
                        case "1": return "PLAN V";
                    }
                }
            }


            if (tarjeta.descripcion.ToUpper().Contains("CABAL"))
            {
                if (cantCuotas > 1)
                {
                    switch (tarjeta.codPlan)
                    {
                        case "1": return "PLAN DE PAGOS";
                        case "2": return "PLAN CABAL";
                    }
                }
            }

            //descPlan = "Plan: " + (trans.tarjeta.codPlan.Equals("2")?"AMEX":"CUOTAS");
            if (tarjeta.descripcion.ToUpper().Contains("AMEX") || tarjeta.descripcion.ToUpper().Contains("AMERICAN"))
            {
                switch (tarjeta.codPlan)
                {
                    case "1": return "CUOTAS";
                    case "2": return "AMEX";
                }

            }

            return descPlan;

        }

        public string getEstadoDescription( ) {

            string estadoDesc = "";
            switch ( this.estadoDescripcion)
            {
                case TipoEstadoTransaccion.IMPRIMIENDO:
                    estadoDesc = "Imprimiendo los cupones";
                    break;
                case TipoEstadoTransaccion.PROCESANDO:
                    estadoDesc = "Procesando la transaccion";
                    break;
                case TipoEstadoTransaccion.CONFIRMADA:
                    estadoDesc = "Transaccion Confirmada";
                    break;
                case TipoEstadoTransaccion.REVERSADA:
                    estadoDesc = "Transaccion Reversada";
                    break;
                case TipoEstadoTransaccion.FALLIDA:
                    estadoDesc = "Transaccion Fallida";
                    break;
                case TipoEstadoTransaccion.CUPONES_IMPRESOS:
                    estadoDesc = "Cupones impresos";
                    break;
                case TipoEstadoTransaccion.CREADA:
                    estadoDesc = "Transaccion creada";
                    break;
                case TipoEstadoTransaccion.REVISE_PINPAD:
                    estadoDesc = "Revise la operación en el Pinpad";
                    break;
                case TipoEstadoTransaccion.TARJETA_LEIDA:
                    estadoDesc = "Tarjeta leida correctamente";
                    break;
                case TipoEstadoTransaccion.PASANDO_INFO_INTERACT:
                    estadoDesc = "Pasando información a Interact";
                    break;
                case TipoEstadoTransaccion.PREPARANDO_DATOS:
                    estadoDesc = "Preparando datos para transaccion";
                    break;
                case TipoEstadoTransaccion.OBTENIENDO_DATOS:
                    estadoDesc = "Obteniendo datos de la transaccion";
                    break;
                case TipoEstadoTransaccion.OBTENIENDO_PROMOCIONES:
                    estadoDesc = "Obteniendo promociones";
                    break;
                case TipoEstadoTransaccion.AGREGANDO_FOP:
                    estadoDesc = "Agregando forma de pago en Sabre";
                    break;
                case TipoEstadoTransaccion.ANALIZANDO_FRAUDE:
                    estadoDesc = "Analizando Fraude";
                    break;
            }

            return estadoDesc;
        }
    }
}

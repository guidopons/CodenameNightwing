//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó mediante una herramienta.
//     Los cambios del archivo se perderán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Windows.Forms;
using CodenameNightwing.Varios;
using CodenameNightwing.BusinessLogic;
using CodenameNightwing.Config;
using CodenameNightwing.WebServices.WSEspecificos;
using CodenameNightwing.WebServices;
using log4net;
using CodenameNightwing.Valtech;
using CodenameNightwing.Valtech.VoidService.Response;
using CodenameNightwing.Valtech.VoidService.Request;
using CodenameNightwing.Valtech.PromoService.Request;

namespace CodenameNightwing.FileManager
{
    public class VBrequestReader
    {
        public static readonly ILog logger = LogManager.GetLogger(typeof(VBrequestReader));
        private static void setInteractUser(string[] lines) {

            try
            {
                if (lines.First(a => a.Contains("interact.user=")) != null) { 
                    string interactUser = lines.First(a => a.Contains("interact.user=")).Split('=')[1];
                    if (interactUser != null && interactUser != "")
                    {
                        Configuration.getInstance().interactUser = interactUser;
                    }
                }
                else
                {
                    Configuration.getInstance().interactUser = "NONE";
                }
            } catch (Exception e) {
                logger.Error("Error al setear el interact user", e);
                Configuration.getInstance().interactUser = "NONE";
            }


        }

        public static string getPropiedad(string key)
        {

            try
            {
                string[] archivo = leerArchivo();

                if (archivo.First(a => a.Contains(key + "=")) != null)
                {
                    return archivo.First(a => a.Contains(key + "=")).Split('=')[1];
                }
                else
                {
                    return null;
                }


            }
            catch (Exception)
            {
                return null;
            }
        }

        public static Transaccion leerVoid()
        {
            try
            {
                string[] archivo = leerArchivo();
                setInteractUser(archivo);
                Tarjeta tar = new Tarjeta();
                tar.numero = archivo.Count(a => a.Contains(".first6=")) > 0 && archivo.Count(a => a.Contains(".last4")) > 0 ? archivo.First(a => a.Contains(".first6=")).Split('=')[1] + "xxxxxx" + archivo.First(a => a.Contains(".last4")).Split('=')[1] : "----xxxxxx----";
                tar.codSabre = archivo.First(a => a.Contains(".cardCode=")).Split('=')[1];
                Transaccion trans = TransaccionBuilder.construirAnulacion(archivo.First(a => a.Contains(".originalTicket=")).Split('=')[1], (archivo.Count(x => x.Contains(".trxReferenceId")) > 0 ? Convert.ToInt32(archivo.First(a => a.Contains(".trxReferenceId=")).Split('=')[1].ToLongFromBase36()) : 0),
                    archivo.Count(a => a.Contains(".originalDate=")) == 1 ? Convert.ToDateTime(archivo.First(a => a.Contains(".originalDate=")).Split('=')[1]) : DateTime.Now, tar);
                return trans;
            }
            catch (Exception e)
            {
                logger.Error("Error al leer el archivo VBrequest", e);
                MessageBox.Show("Error al leer el archivo VBrequest", "Error de lectura en archivo", MessageBoxButtons.OK, MessageBoxIcon.Error);
                Application.Exit();
                return null;
            }

        }
        public static VoidServiceRequest leerVoidTickets()
        {
            try
            {
                string[] archivo = leerArchivo();
                setInteractUser(archivo);

                VoidServiceRequest voidPnr = new VoidServiceRequest();
                voidPnr.pnr = archivo.First(a => a.StartsWith("void.pnr=")).Split('=')[1];

                int cantTicketsEnPnr = archivo.Where(a => a.Contains("void.vcr")).Select(a => a.Split('=')[1]).Distinct().Count();
                for (int i = 1; i <= cantTicketsEnPnr; i++)
                {
                    string nroTicket = archivo.First(a => a.StartsWith("void.vcr" + i + "=")).Split('=')[1];
                    voidPnr.vcr.Add(nroTicket);
                }

                return voidPnr;
            }
            catch (Exception e)
            {
                logger.Error("Error al leer el archivo VBrequest", e);
                MessageBox.Show("Error al leer el archivo VBrequest", "Error de lectura en archivo", MessageBoxButtons.OK, MessageBoxIcon.Error);
                Application.Exit();
                return null;
            }
        }

        public static EMDServiceRequest leerIntereses()
        {
            try
            {
                string[] archivo = leerArchivo();
                setInteractUser(archivo);

                EMDServiceRequest eMDInteres = new EMDServiceRequest();

                string pnr = archivo.First(a => a.StartsWith("intereses.pnr=")).Split('=')[1];
                eMDInteres.pnr = pnr;

                eMDInteres.formOfPayment = new List<FormOfPayment>();


                string cardNumber = archivo.First(a => a.StartsWith("intereses.ccNumber=")).Split('=')[1];
                string cardCode = archivo.First(a => a.StartsWith("intereses.cardCode=")).Split('=')[1];
                string expirationDate = archivo.First(a => a.StartsWith("intereses.expirationDate=")).Split('=')[1];
                string approvalCode = archivo.First(a => a.StartsWith("intereses.approvalCode=")).Split('=')[1];
                string amount = archivo.First(a => a.StartsWith("intereses.amount=")).Split('=')[1];

                decimal interesesAmount = decimal.Parse(amount, NumberStyles.AllowDecimalPoint, CultureInfo.InvariantCulture);

                //Obtiene el currency del VBRequest commonFields
                string currency = VBrequestReader.getPropiedad("currency");

                eMDInteres.formOfPayment.Add(new FormOfPayment("CC", cardCode, cardNumber, expirationDate, approvalCode, interesesAmount, currency));

                string endorsement = archivo.First(a => a.StartsWith("intereses.endorsement=")).Split('=')[1];
                string installments = archivo.First(a => a.StartsWith("intereses.installments=")).Split('=')[1];
                eMDInteres.optionalFields = new OptionalFields(endorsement, false, interesesAmount);

                return eMDInteres;
            }
            catch (Exception e)
            {
                logger.Error("Error al leer el archivo VBrequest", e);
                MessageBox.Show("Error al leer el archivo VBrequest", "Error de lectura en archivo", MessageBoxButtons.OK, MessageBoxIcon.Error);
                Application.Exit();
                return null;
            }

        }

        public static Voucher leerVoucher()
        {
            try
            {
                string[] archivo = leerArchivo();
                Voucher voucher = new Voucher();
                voucher.idVoucher = archivo.First(a => a.Contains("voucher.id=")).Split('=')[1];
                voucher.agent = archivo.First(a => a.Contains("voucher.agent=")).Split('=')[1];
                voucher.city = archivo.First(a => a.Contains("voucher.city=")).Split('=')[1];
                voucher.currency = archivo.First(a => a.Contains("voucher.currency=")).Split('=')[1];
                voucher.flightInfo = archivo.First(a => a.Contains("voucher.flightInfo=")).Split('=')[1];
                voucher.issueDate = archivo.First(a => a.Contains("voucher.issueDate=")).Split('=')[1];
                voucher.name = archivo.First(a => a.Contains("voucher.name=")).Split('=')[1];
                voucher.station = archivo.First(a => a.Contains("voucher.station=")).Split('=')[1];
                voucher.tktAsoc = archivo.First(a => a.Contains("voucher.tktAsoc=")).Split('=')[1];
                voucher.tktNumber = archivo.First(a => a.Contains("voucher.tktNumber=")).Split('=')[1];
                voucher.totalFare = archivo.First(a => a.Contains("voucher.totalFare=")).Split('=')[1];
                voucher.status = archivo.First(a => a.Contains("voucher.status=")).Split('=')[1];

                WebServiceVoucher wsVoucher = new WebServiceVoucher( voucher.idVoucher );
                Voucher voucherWs = WebResponseParser.parseXMLGetDescripcionVoucher(wsVoucher.getResponse());
                if (voucherWs != null)
                {
                    voucher.descEspanol = voucherWs.descEspanol;
                    voucher.descIngles = voucherWs.descIngles;
                }
                

                setInteractUser( archivo );

                return voucher;
            }
            catch (Exception e)
            {
                logger.Error("Error al leer el archivo VBrequest", e);
                MessageBox.Show("Error al leer el archivo VBrequest", "Error de lectura en archivo", MessageBoxButtons.OK, MessageBoxIcon.Error);
                Application.Exit();
                return null;
            }

        }




        public static Transaccion setCommonFields( Transaccion trans, string[] archivo)
        {

            trans.currency = archivo.First(a => a.StartsWith("commonFields.currency=")).Split('=')[1];
            trans.country = archivo.First(a => a.StartsWith("commonFields.country=")).Split('=')[1];
            trans.pcc = archivo.First(a => a.StartsWith("commonFields.pcc=")).Split('=')[1];
            trans.station = archivo.First(a => a.StartsWith("commonFields.station=")).Split('=')[1];
            trans.printer = archivo.First(a => a.StartsWith("commonFields.printer=")).Split('=')[1];

            trans = VBrequestReader.setPrimaryPnr(trans);
            trans = VBrequestReader.setPrimaryEmail(trans);
            return trans;

        }


        public static Transaccion setPrimaryPnr(Transaccion trans)
        {

            string[] archivo = leerArchivo();
            string busq = archivo.First(a => a.StartsWith("interact.primaryPnr="));
            if (busq != null)
                trans.primaryPnr = archivo.First(a => a.StartsWith("interact.primaryPnr=")).Split('=')[1];
            else
                trans.primaryPnr = "XXXXXX";
            return trans;

        }

        public static Transaccion setPrimaryEmail(Transaccion trans)
        {

            string[] archivo = leerArchivo();
            string busq = archivo.First(a => a.StartsWith("pnr1.emailInfo="));
            if (busq != null)
                trans.primaryEmail = archivo.First(a => a.StartsWith("pnr1.emailInfo=")).Split('=')[1];
                if (trans.primaryEmail.Contains(","))
                {
                    trans.primaryEmail = trans.primaryEmail.Split(',')[0];
                }
            else
                trans.primaryEmail = string.Empty;
            return trans;

        }

        public static Transaccion setCommonFields( Transaccion trans )
        {
            string[] archivo = leerArchivo();

            try { 
                if ( archivo != null) {
                    setCommonFields( trans, archivo);
                }
            }
            catch (Exception)
            {
                if ( trans.currency == null ) trans.currency = "ARS";
                if ( trans.country == null ) trans.country = "ARG";
                
            }

            return trans;

        }


        public static Transaccion leerRefund()
        {
            try
            {
                string[] archivo = leerArchivo();
                setInteractUser(archivo);
                Tarjeta tar = new Tarjeta();
                tar.numero = archivo.First(a => a.StartsWith("refund.first6=")).Split('=')[1] + "xxxxxx" + archivo.First(a => a.StartsWith("refund.last4")).Split('=')[1];
                tar.codSabre = archivo.First(a => a.StartsWith("refund.cardCode=")).Split('=')[1];
                Transaccion trans =  TransaccionBuilder.construirDevolucion(archivo.First(a => a.StartsWith("refund.originalTicket=")).Split('=')[1],
                    (archivo.Count(x => x.Contains(".trxReferenceId")) > 0 ? Convert.ToInt32(archivo.First(a => a.Contains("refund.trxReferenceId=")).Split('=')[1].ToLongFromBase36()) : 0),
                    Convert.ToDateTime(archivo.First(a => a.StartsWith("refund.originalDate=")).Split('=')[1]),
                    POIutils.parseDecimalStr(archivo.First(a => a.StartsWith("refund.amount=")).Split('=')[1]),
                    tar);
                return trans;
            }
            catch (Exception e)
            {
                logger.Error("Error al leer el archivo VBrequest", e);
                MessageBox.Show("Error al leer el archivo VBrequest", "Error de lectura en archivo", MessageBoxButtons.OK, MessageBoxIcon.Error);
                Application.Exit();
                return null;
            }
        }

        public static Transaccion leerExchange()
        {
            try
            {
                string[] archivo = leerArchivo();
                setInteractUser(archivo);
                decimal aCambiar = POIutils.parseDecimalStr(archivo.First(a => a.StartsWith("exchange.amount=")).Split('=')[1]);
                //     string tipoItinerario = archivo.First(a => a.StartsWith("exchange.itinType=")).Split('=')[1];
                string auxFecha = archivo.First(a => a.StartsWith("#")).Split('#')[1];
                DateTime fecha = Convert.ToDateTime(auxFecha.Split(' ')[1] + " " + auxFecha.Split(' ')[2] + " " + auxFecha.Substring(auxFecha.Length - 4, 4) + " " + auxFecha.Split(' ')[3]);
                List<string> itins = null;
                string itinsStr = archivo.Count(a => a.StartsWith("exchange.itinerary=")) > 0 ? archivo.First(a => a.StartsWith("exchange.itinerary=")).Split('=')[1] : "";
                if (itinsStr != null && itinsStr != "")
                {
                    char[] charSeparators = new char[] { '|' };
                    itins = new List<string>(itinsStr.Split(charSeparators, StringSplitOptions.RemoveEmptyEntries));
                    //itins = new List<string>(itinsStr.Split('|'));
                }
                return TransaccionBuilder.construirCambio(fecha, aCambiar, itins);
            }
            catch (Exception e)
            {
                logger.Error("Error al leer el archivo VBrequest", e);
                MessageBox.Show("Error al leer el archivo VBrequest", "Error de lectura en archivo", MessageBoxButtons.OK, MessageBoxIcon.Error);
                Application.Exit();
                return null;
            }
        }

        public static List<Pnr> leerPnrs()
        {
            try
            {
                string[] archivo = leerArchivo();
                setInteractUser(archivo);
                int cantPnr = archivo.Count(a => a.StartsWith("pnr") && a.Split('=')[0].EndsWith("pnr"));
                List<Pnr> lsPnrs = new List<Pnr>();
                for (int cont = 1; cont <= cantPnr; cont++)
                {
                    var lineasEnPnr = archivo.Where((string a) => a.StartsWith("pnr" + cont));
                    Pnr auxpnr = new Pnr();
                    auxpnr.onlyEmd = lineasEnPnr.Count(a => a.StartsWith("pnr" + cont + ".onlyEmd=")) > 0 ? Convert.ToBoolean(lineasEnPnr.First(a => a.StartsWith("pnr" + cont + ".onlyEmd=")).Split('=')[1]) : false;//Convert.ToBoolean(lineasEnPnr.First(a => a.StartsWith("pnr" + cont + ".onlyEmd=")).Split('=')[1]);
                    auxpnr.codSabre = lineasEnPnr.First(a => a.StartsWith("pnr" + cont + ".pnr=")).Split('=')[1];
                    auxpnr.tipoItinerario = lineasEnPnr.Count(a => a.StartsWith("pnr" + cont + ".itinType=")) > 0 ? lineasEnPnr.First(a => a.StartsWith("pnr" + cont + ".itinType=")).Split('=')[1] : "";
                    auxpnr.emails = lineasEnPnr.Count(a => a.StartsWith("pnr" + cont + ".emailInfo=")) > 0 ? lineasEnPnr.First(a => a.StartsWith("pnr" + cont + ".emailInfo=")).Split('=')[1] : "";
                    auxpnr.groupName = lineasEnPnr.Count(a => a.StartsWith("pnr" + cont + ".pnrGroupName=")) > 0 ? lineasEnPnr.First(a => a.StartsWith("pnr" + cont + ".pnrGroupName=")).Split('=')[1] : "";

                    string itinsStr = lineasEnPnr.Count(a => a.StartsWith("pnr" + cont + ".itinerary=")) > 0 ? lineasEnPnr.First(a => a.StartsWith("pnr" + cont + ".itinerary=")).Split('=')[1] : "";
                    if (itinsStr != null && itinsStr != "")
                    {
                        char[] charSeparators = new char[] { '|' };
                        auxpnr.itins = new List<string>(itinsStr.Split(charSeparators, StringSplitOptions.RemoveEmptyEntries));
                    }

                    int cantSeatsPnr = lineasEnPnr.Where(a => a.Contains("seatLine")).Select(a => a.Split('.')[1]).Distinct().Count();
                    for (int i = 1; i <= cantSeatsPnr; i++)
                    {
                        string seatLine = lineasEnPnr.Count(a => a.StartsWith("pnr" + cont + ".seatLine" + i + "=")) > 0 ? lineasEnPnr.First(a => a.StartsWith("pnr" + cont + ".seatLine" + i + "=")).Split('=')[1] : "";
                        auxpnr.seats.Insert(i - 1, seatLine);
                    }

                    int cantFFPnr = lineasEnPnr.Where(a => a.Contains("ffLine")).Select(a => a.Split('.')[1]).Distinct().Count();
                    for (int i = 1; i <= cantFFPnr; i++)
                    {
                        string ffLine = lineasEnPnr.Count(a => a.StartsWith("pnr" + cont + ".ffLine" + i + "=")) > 0 ? lineasEnPnr.First(a => a.StartsWith("pnr" + cont + ".ffLine" + i + "=")).Split('=')[1] : "";
                        auxpnr.ffNumbers.Add(ffLine);
                    }


                    int cantTicketsEnPnr = lineasEnPnr.Where(a => a.Contains("ticket")).Select(a => a.Split('.')[1]).Distinct().Count();
                    for (int i = 1; i <= cantTicketsEnPnr; i++)
                    {
                        string descTicket = lineasEnPnr.Count(a => a.StartsWith("pnr" + cont + ".ticket" + i + ".description=")) > 0 ? lineasEnPnr.First(a => a.StartsWith("pnr" + cont + ".ticket" + i + ".description=")).Split('=')[1] : "";
                        Ticket ticket = new Ticket(descTicket);

                        string fromTkt = lineasEnPnr.Count(a => a.StartsWith("pnr" + cont + ".ticket" + i + ".from=")) > 0 ? lineasEnPnr.First(a => a.StartsWith("pnr" + cont + ".ticket" + i + ".from=")).Split('=')[1] : "";
                        if (fromTkt != null && fromTkt != "")
                        {
                            ticket.from = fromTkt;
                        }


                        string statusTkt = lineasEnPnr.Count(a => a.StartsWith("pnr" + cont + ".ticket" + i + ".status=")) > 0 ? lineasEnPnr.First(a => a.StartsWith("pnr" + cont + ".ticket" + i + ".status=")).Split('=')[1] : "";
                        if (statusTkt != null && statusTkt != "")
                        {
                            ticket.status = statusTkt.Trim();
                        }

                        string tourCode = lineasEnPnr.Count(a => a.StartsWith("pnr" + cont + ".ticket" + i + ".tourCode=")) > 0 ? lineasEnPnr.First(a => a.StartsWith("pnr" + cont + ".ticket" + i + ".tourCode=")).Split('=')[1] : "";
                        if (tourCode != null && tourCode != "")
                        {
                            ticket.tourCode = tourCode;
                        }

                        string descExpanded = lineasEnPnr.Count(a => a.StartsWith("pnr" + cont + ".ticket" + i + ".descExpanded=")) > 0 ? lineasEnPnr.First(a => a.StartsWith("pnr" + cont + ".ticket" + i + ".descExpanded=")).Split('=')[1] : "";
                        if (descExpanded != null && descExpanded != "")
                        {
                            ticket.descExpanded = descExpanded;
                        }


                        string agentDesc = lineasEnPnr.Count(a => a.StartsWith("pnr" + cont + ".ticket" + i + ".agentDesc=")) > 0 ? lineasEnPnr.First(a => a.StartsWith("pnr" + cont + ".ticket" + i + ".agentDesc=")).Split('=')[1] : "";
                        if (agentDesc != null && agentDesc != "")
                        {
                            ticket.agentDesc = agentDesc;
                        }


                        string issueDate = lineasEnPnr.Count(a => a.StartsWith("pnr" + cont + ".ticket" + i + ".issueDate=")) > 0 ? lineasEnPnr.First(a => a.StartsWith("pnr" + cont + ".ticket" + i + ".issueDate=")).Split('=')[1] : "";
                        if (issueDate != null && issueDate != "")
                        {
                            ticket.issueDate = issueDate;
                        }

                        int cantFopEnPnr = lineasEnPnr.Where(a => a.Contains("ticket" + i + ".fop")).Select(a => a.Split('.')[1]).Count();
                        for (int p = 1; p <= cantFopEnPnr; p++)
                        {
                            string fopDesc = lineasEnPnr.Count(a => a.StartsWith("pnr" + cont + ".ticket" + i + ".fop" + p + "=")) > 0 ? lineasEnPnr.First(a => a.StartsWith("pnr" + cont + ".ticket" + i + ".fop" + p + "=")).Split('=')[1] : "";
                            string fopCurrency = lineasEnPnr.Count(a => a.StartsWith("pnr" + cont + ".ticket" + i + ".fop" + p + ".currency=")) > 0 ? lineasEnPnr.First(a => a.StartsWith("pnr" + cont + ".ticket" + i + ".fop" + p + ".currency=")).Split('=')[1] : "";
                            FOP fopPayment = new FOP();
                            fopPayment.descripcion = fopDesc;
                            fopPayment.currency = fopCurrency;
                            ticket.fops.Add(fopPayment);
                        }

                        auxpnr.tickets.Add(ticket);
                    }

                    auxpnr.agentDesc = auxpnr.getAgentDesc();
                    Configuration.getInstance().agentDesc = auxpnr.agentDesc;

                    int cantPasajerosEnPnr = lineasEnPnr.Where(a => a.Contains("pax")).Select(a => a.Split('.')[1]).Distinct().Count();
                    for (int i = 1; i <= cantPasajerosEnPnr; i++)
                    {
                        Pasajero auxp = new Pasajero();
                        auxp.nombre = lineasEnPnr.Count(a => a.StartsWith("pnr" + cont + ".pax" + i + ".name=")) > 0 ? lineasEnPnr.First(a => a.StartsWith("pnr" + cont + ".pax" + i + ".name=")).Split('=')[1] : "XXX/XXX";
                        auxp.tipoPax = lineasEnPnr.Count(a => a.StartsWith("pnr" + cont + ".pax" + i + ".pq=")) > 0 ? lineasEnPnr.First(a => a.StartsWith("pnr" + cont + ".pax" + i + ".pq=")).Split('=')[1] : "XXX";
                        if (lineasEnPnr.Count(a => a.StartsWith("pnr" + cont + ".pax" + i + ".fare=")) > 0)
                            auxp.fare = POIutils.parseDecimalStr(lineasEnPnr.First(a => a.StartsWith("pnr" + cont + ".pax" + i + ".fare=")).Split('=')[1]);
                        int cantEmdPasajero = lineasEnPnr.Where(a => a.Split('=')[0].StartsWith("pnr" + cont + ".pax" + i + ".emd")).Select(a => a.Split('.')[2]).Distinct().Count();
                        for (int j = 1; j <= cantEmdPasajero; j++)
                        {
                            BusinessLogic.Emd auxe = new BusinessLogic.Emd();
                            auxe.descripcion = lineasEnPnr.Count(a => a.StartsWith("pnr" + cont + ".pax" + i + ".emd" + j + ".description=")) > 0 ? lineasEnPnr.First(a => a.StartsWith("pnr" + cont + ".pax" + i + ".emd" + j + ".description=")).Split('=')[1] : "XXX";
                            auxe.fare = POIutils.parseDecimalStr(lineasEnPnr.First(a => a.StartsWith("pnr" + cont + ".pax" + i + ".emd" + j + ".amount=")).Split('=')[1]);
                            auxp.emds.Add(auxe);
                        }
                        auxpnr.pasajeros.Add(auxp);
                    }
                    lsPnrs.Add(auxpnr);
                }
                return lsPnrs;
            }
            catch (Exception e)
            {
                logger.Error("Error al leer el archivo VBrequest", e);
                MessageBox.Show("Error al leer el archivo VBrequest", "Error de lectura en archivo", MessageBoxButtons.OK, MessageBoxIcon.Error);
                Application.Exit();
                return null;
            }
        }

   


        private static String[] leerArchivo()
        {
            try
            {
                Configuration conf = Configuration.getInstance();
                string vbRequestFile = conf.poiFilesPath + conf.vbRequestFile;
                return File.ReadAllLines(vbRequestFile);
            }
            catch (Exception e)
            {
                logger.Error("Error al leer el archivo VBrequest", e);
                return null;
            }
        }
    }
}

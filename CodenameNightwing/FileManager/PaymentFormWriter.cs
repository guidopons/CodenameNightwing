//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó mediante una herramienta.
//     Los cambios del archivo se perderán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.IO;
using CodenameNightwing.Varios;
using CodenameNightwing.BusinessLogic;
using CodenameNightwing.Config;
using CodenameNightwing.Crypto;
using log4net;
using System.Linq;
using CodenameNightwing.Valtech.VoidService.Response;

namespace CodenameNightwing.FileManager
{
    public class PaymentFormWriter
    {
        public static readonly ILog logger = LogManager.GetLogger(typeof(PaymentFormWriter));

        private static string EncryptLine(string line) {

            string output = line;
            string password = Configuration.getInstance().secretKey;
            if (password != null && !password.Trim().Equals("")) {
                output = "ENC-" + AESCrypto.Encrypt( line, password);
            }

            return output;

        }
        public static bool grabarPago(List<Transaccion> trans)
        {
            try
            {
                Configuration conf = Configuration.getInstance();
                string paymentFile = conf.poiFilesPath + conf.paymentFile;
                StreamWriter sw = File.CreateText(paymentFile);
                int cont = 1;

                if (trans != null)
                {
                    if (trans.Count > 0)
                    {
                       sw.WriteLine("payment.status = OK");
                        foreach (var auxTrans in trans)
                        {
                            if (auxTrans.tarjeta.tipoTarjeta != TipoTarjeta.EFECTIVO)
                            {
                            
                               if ( auxTrans.tarjeta.descripcion == null)
                                {
                                    TarjetaCajero auxTC = EntityLoader.loadTarjetas().First(x => x.codTarjetaSabre == auxTrans.tarjeta.codSabre);
                                    if (auxTC != null)
                                    {
                                        auxTrans.tarjeta.descripcion = auxTC.descripcionTarjeta;
                                    }
                                }
                               sw.WriteLine("obj" + cont + ".cardType = " + auxTrans.tarjeta.descripcion);
                               sw.WriteLine("obj" + cont + ".cardCode = " + auxTrans.tarjeta.codSabre);
                               sw.WriteLine(EncryptLine("obj" + cont + ".cardNumber = " + auxTrans.tarjeta.numero));
                               sw.WriteLine("obj" + cont + ".document = " + auxTrans.tarjeta.owner.documento);
                               sw.WriteLine("obj" + cont + ".card6first = " + auxTrans.tarjeta.primeros6());
                               sw.WriteLine("obj" + cont + ".card4last = " + auxTrans.tarjeta.ultimos4());
                               sw.WriteLine(EncryptLine("obj" + cont + ".expirationDate = " + auxTrans.tarjeta.vencimiento));
                               sw.WriteLine("obj" + cont + ".pos.batchNumber = " + auxTrans.numLote);
                               sw.WriteLine("obj" + cont + ".pos.tktNumber = " + Convert.ToInt32(auxTrans.numTicket));
                                // SE AGREGA ESTE CAMPO PARA IDENTIFICACION DE TRANSACCIONES DE AUTORIZADORES POR RED
                               sw.WriteLine("obj" + cont + ".trxReferenceId = " + auxTrans.trxReferenceId.ToString().ToBase36String());
                                // SE SACA CASTEO A INT DE CODIGO AUTORIZACION PORQUE POR LO VISTO EN TARJETAS INTERNACIONALES LOS CODIGOS DE AUT TAMBIEN TIENEN LETRAS
                               sw.WriteLine("obj" + cont + ".pos.authCode = " + auxTrans.numAutorizacion.TrimStart('0'));
                                sw.WriteLine("obj" + cont + ".autorizator = " + auxTrans.gateway);
                                sw.WriteLine("obj" + cont + ".pos.quotes = " + auxTrans.cantCuotas.ToString());
                               sw.WriteLine("obj" + cont + ".pos.totalAuth = " + auxTrans.importeTotal.ToString("#####0.00").Replace(",", "."));
                               sw.WriteLine("obj" + cont + ".pos.totalAmount = " + auxTrans.importeSinIntereses().ToString("#####0.00").Replace(",", "."));
                               sw.WriteLine("obj" + cont + ".pos.totalInts = " + auxTrans.interes.ToString("#####0.00").Replace(",", "."));
                               sw.WriteLine("obj" + cont + ".pos.commerceCode = " + auxTrans.comercio.codigoComercio);
                               sw.WriteLine("obj" + cont + ".pos.offline = " + (auxTrans.modo == 0 ? "true" : "false"));
                               sw.WriteLine("obj" + cont + ".pos.date = " + auxTrans.fecha.Day.ToString("00") + auxTrans.fecha.Month.ToString("00") + auxTrans.fecha.Year.ToString().Substring(2, 2));
                               sw.WriteLine("obj" + cont + ".cuit = " + auxTrans.tarjeta.owner.cuitCuil);
                               sw.WriteLine("obj" + cont + ".cuitType = " + auxTrans.tarjeta.owner.tipoCuitCuil);
                               sw.WriteLine("obj" + cont + ".ownerName = " + auxTrans.tarjeta.owner.nombre);
                               sw.WriteLine("obj" + cont + ".country = " + ((auxTrans.pais == null )?"AR":auxTrans.pais.codigoPais));
                                cont++;
                            }  
                        }
                    }
                    else
                       sw.WriteLine("payment.status = INCOMPLETE");
                }
                else
                   sw.WriteLine("payment.status = ERROR");
                sw.Close();
                return true;
            }
            catch (Exception e)
            {
                logger.Error("Error al escribir el archivo paymentForm", e);
                return false;
            }
        }

        public static bool grabarCuil(string cuil)
        {
            try
            {
                Configuration conf = Configuration.getInstance();
                string paymentFile = conf.poiFilesPath + conf.paymentFile;
                StreamWriter sw = File.CreateText(paymentFile);
                sw.WriteLine("cuil.number =" + cuil);
                sw.Close();
                return true;
            }
            catch (Exception e)
            {
                logger.Error("Error al escribir el archivo paymentForm", e);
                return false;
            }
        }

        public static bool grabarCierreLote(bool estado)
        {
            try
            {
                Configuration conf = Configuration.getInstance();
                string paymentFile = conf.poiFilesPath + conf.paymentFile;
                StreamWriter sw = File.CreateText(paymentFile);
                sw.WriteLine("others.operation = LOTE");
                if (estado)
                   sw.WriteLine("others.status = OK");
                else
                   sw.WriteLine("void.status = ERROR");
                sw.Close();
                return true;
            }
            catch (Exception e)
            {
                logger.Error("Error al escribir el archivo paymentForm", e);
                return false;
            }
        }

        public static bool grabarCambio(Transaccion trans)
        {
            try
            {
                Configuration conf = Configuration.getInstance();
                string paymentFile = conf.poiFilesPath + conf.paymentFile;
                StreamWriter sw = File.CreateText(paymentFile);

                if (trans != null && trans.isAprobada())
                {
                   sw.WriteLine("payment.status = OK");
                    if (trans.tarjeta.tipoTarjeta != TipoTarjeta.EFECTIVO)
                    {
                        if (trans.tarjeta.descripcion == null)
                        {
                            TarjetaCajero auxTC = EntityLoader.loadTarjetas().First(x => x.codTarjetaSabre == trans.tarjeta.codSabre);
                            if (auxTC != null)
                            {
                                trans.tarjeta.descripcion = auxTC.descripcionTarjeta;
                            }
                        }
                        sw.WriteLine("obj1.cardType = " + trans.tarjeta.descripcion);
                       sw.WriteLine("obj1.cardCode = " + trans.tarjeta.codSabre);
                       sw.WriteLine(EncryptLine("obj1.cardNumber = " + trans.tarjeta.numero));
                       sw.WriteLine("obj1.document = " + trans.tarjeta.owner.documento);
                       sw.WriteLine("obj1.card6first = " + trans.tarjeta.primeros6());
                       sw.WriteLine("obj1.card4last = " + trans.tarjeta.ultimos4());
                       sw.WriteLine(EncryptLine("obj1.expirationDate = " + trans.tarjeta.vencimiento));
                       sw.WriteLine("obj1.pos.batchNumber = " + trans.numLote);
                       sw.WriteLine("obj1.pos.tktNumber = " + Convert.ToInt32(trans.numTicket));
                        // SE AGREGA ESTE CAMPO PARA IDENTIFICACION DE TRANSACCIONES DE AUTORIZADORES POR RED
                       sw.WriteLine("obj1.trxReferenceId = " + trans.trxReferenceId.ToString().ToBase36String());
                        sw.WriteLine("obj1.autorizator = " + trans.gateway);
                        // SE SACA CASTEO A INT DE CODIGO AUTORIZACION PORQUE POR LO VISTO EN TARJETAS INTERNACIONALES LOS CODIGOS DE AUT TAMBIEN TIENEN LETRAS
                        sw.WriteLine("obj1.pos.authCode = " + trans.numAutorizacion.TrimStart('0'));
                       sw.WriteLine("obj1.pos.quotes = " + trans.cantCuotas.ToString());
                       sw.WriteLine("obj1.pos.totalAuth = " + trans.importeTotal.ToString("#####0.00").Replace(",", "."));
                       sw.WriteLine("obj1.pos.totalAmount = " + trans.importeSinIntereses().ToString("#####0.00").Replace(",", "."));
                       sw.WriteLine("obj1.pos.totalInts = " + trans.interes.ToString("#####0.00").Replace(",", "."));
                       sw.WriteLine("obj1.pos.commerceCode = " + trans.comercio.codigoComercio);
                       sw.WriteLine("obj1.pos.offline = " + (trans.modo == 0 ? "true" : "false"));
                       sw.WriteLine("obj1.pos.date = " + trans.fecha.Day.ToString("00") + trans.fecha.Month.ToString("00") + trans.fecha.Year.ToString().Substring(2, 2));
                       sw.WriteLine("obj1.cuit = " + trans.tarjeta.owner.cuitCuil);
                       sw.WriteLine("obj1.ownerName = " + trans.tarjeta.owner.nombre);
                       sw.WriteLine("obj1.cuitType = " + trans.tarjeta.owner.tipoCuitCuil);
                       sw.WriteLine("obj1.country = " + ((trans.pais == null) ? "AR" : trans.pais.codigoPais));
                    }
                }
                else
                {
                   sw.WriteLine("payment.status = ERROR");
                }
                sw.Close();
                return true;
            }
            catch (Exception e)
            {
                logger.Error("Error al escribir el archivo paymentForm", e);
                return false;
            }
        }

        public static bool grabarRefund(Transaccion trans)
        {
            try
            {
                Configuration conf = Configuration.getInstance();
                string paymentFile = conf.poiFilesPath + conf.paymentFile;
                StreamWriter sw = File.CreateText(paymentFile);

                if (trans != null)
                {
                   sw.WriteLine("refund.ticketNumber = " + Convert.ToInt32(trans.numTicket));
                    // SE AGREGA ESTE CAMPO PARA IDENTIFICACION DE TRANSACCIONES DE AUTORIZADORES POR RED
                   sw.WriteLine("refund.trxReferenceId = " + trans.trxReferenceId.ToString().ToBase36String());
                   sw.WriteLine("refund.batchNumber = " + trans.numLote);
                    // SE SACA CASTEO A INT DE CODIGO AUTORIZACION PORQUE POR LO VISTO EN TARJETAS INTERNACIONALES LOS CODIGOS DE AUT TAMBIEN TIENEN LETRAS
                   sw.WriteLine("refund.authCode = " + trans.numAutorizacion.TrimStart('0'));
                   sw.WriteLine("refund.commerceCode = " + trans.comercio.codigoComercio);
                   sw.WriteLine("refund.cardFirst = " + trans.tarjeta.primeros6() );
                   sw.WriteLine("refund.cardNumber = " + trans.tarjeta.numero );
                    sw.WriteLine("refund.autorizator = " + trans.gateway);
                    sw.WriteLine("refund.status = " + "OK");
                }
                else
                {
                   sw.WriteLine("refund.status = ERROR");
                }
                sw.Close();
                return true;
            }
            catch (Exception e)
            {
                logger.Error("Error al escribir el archivo paymentForm", e);
                return false;
            }
        }

        public static bool grabarVoid(Transaccion trans)
        {
            try
            {
                Configuration conf = Configuration.getInstance();
                string paymentFile = conf.poiFilesPath + conf.paymentFile;
                StreamWriter sw = File.CreateText(paymentFile);
                if (trans != null)
                {
                   sw.WriteLine("void.ticketNumber = " + ((trans.numTicket!=null)?Convert.ToInt32(trans.numTicket):0));
                    // SE AGREGA ESTE CAMPO PARA IDENTIFICACION DE TRANSACCIONES DE AUTORIZADORES POR RED
                   sw.WriteLine("void.trxReferenceId = " + trans.trxReferenceId.ToString().ToBase36String());
                   sw.WriteLine("void.batchNumber = " + trans.numLote);
                    // SE SACA CASTEO A INT DE CODIGO AUTORIZACION PORQUE POR LO VISTO EN TARJETAS INTERNACIONALES LOS CODIGOS DE AUT TAMBIEN TIENEN LETRAS
                   sw.WriteLine("void.authCode = " + ((trans.numAutorizacion != null)?trans.numAutorizacion.TrimStart('0') : "0"));
                   sw.WriteLine("void.commerceCode = " + trans.comercio.codigoComercio);
                    sw.WriteLine("void.autorizator = " + trans.gateway);
                    sw.WriteLine("void.status = " + "OK");
                }
                else
                {
                   sw.WriteLine("void.status = ERROR");
                }
                sw.Close();
                return true;
            }
            catch (Exception e)
            {
                logger.Error("Error al escribir el archivo paymentForm", e);
                return false;
            }
        }

        public static void deleteAndSaveDefault()
        {
            try
            {
                Configuration conf = Configuration.getInstance();
                string paymentFile = conf.poiFilesPath + conf.paymentFile;
                File.Delete(paymentFile);
                StreamWriter sw = File.CreateText(paymentFile);
                sw.WriteLine("payment.status = ERROR");
                sw.Close();
            }
            catch (Exception e)
            {
                logger.Error("Error al borrar el archivo paymentForm y guardar el default", e);
            }
        }


        public static bool grabarVoidWS(List<Vcr> tkts)
        {
            try
            {
                Configuration conf = Configuration.getInstance();
                string paymentFile = conf.poiFilesPath + conf.paymentFile;
                StreamWriter sw = File.CreateText(paymentFile);

                if (tkts != null)
                {
                    foreach (Vcr tkt in tkts)
                    {
                        sw.WriteLine("void.ticketNumber = " + tkt.vcr);
                        sw.WriteLine("void.status = " + ((tkt.success) ? "VOIDED":"ERROR"));

                    }
                }
                else
                {
                    sw.WriteLine("void.status = ERROR");
                }
                sw.Close();
                return true;
            }
            catch (Exception e)
            {
                logger.Error("Error al escribir el archivo paymentForm", e);
                return false;
            }
        }
    }
}

